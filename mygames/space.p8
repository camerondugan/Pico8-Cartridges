pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
-- ◆ portal inspired ◆
--   by  cameron dugan

--player
px=0
py=0
pxo=0
pyo=0
inputs={}
p_sprites={1,17}
p_damage=0
p_can_move=true
p_move_started=nil

--controlls
input_delay=6
input_buffer={}

--utils
debug=true
debug_vars={}

function _init()
	--key repeat delay
	poke(0x5f5c, input_delay)
	poke(0x5f5d, input_delay)
	--disable black transparency
	palt(0,false)
end


function _draw()
	cls()
	★_bg()
	map()
	--player
	--d_player()
	if (debug) then
		for i in all(debug_vars) do
			print(i,8)
		end
	end
	debug_vars={}
end

function _update60()
	get_input()
	update_player()
end

function get_input()
	local x,y = 0,0
	if (btnp(0)) x-=1
	if (btnp(1)) x+=1
	if (btnp(2)) y-=1
	if (btnp(3)) y+=1
	if (abs(x)>0 or abs(y)>0) then
		if (#input_buffer < 2) then
			add(input_buffer,{x=x,y=y})
		end
	end
end

function update_player()
	if (#input_buffer>0) then
		if (p_can_move) then
			move_from_buffer()
		end
	else	
		x=0
		y=0
	end
			--movement
	p_move(x,y)
	--update player sprite offset
	o=slerp_movement(x,y,pdx,pdy)
	pxo=o.x
	pyo=o.y
end

function move_from_buffer()
	x=input_buffer[1].x
	y=input_buffer[1].y
	del(input_buffer,input_buffer[1])
end

function d_player()
		spr(
			p_damage+
			get_frame(p_sprites,3)
			,px+pxo
			,py+pyo)
end

function p_move(x,y)
	if (p_can_move) and 
				((abs(x)>0) or abs(y)>0) 
				then
		px+=8*x
		py+=8*y
		--direction during movement
		pdx=x
		pdy=y
		p_can_move=false
		p_move_started=t()
	end
end

--generate offset
function slerp_movement(x,y,dx,dy)
	local xo,yo = 0,0
	if (not p_can_move) then
		local dt = t()-p_move_started
		xo=-dx*8+8*input_delay*dt*dx
		yo=-dy*8+8*input_delay*dt*dy
		if (dt > 1/input_delay) then
			p_can_move=true
			xo=0
			yo=0
		end
	end
	return {x=xo,y=yo}
end
	

function get_frame(arr,speed)
	return arr[flr(t()*speed%#arr)+1]
end
-->8
--particle fx
★_l1={} --stars layer 1
★_l2={} --stars layer 2
n★_l1=50 --num of stars l1
n★_l2=120 --num of stars l2
--★ offset
★l1o={x=-1,y=-1}
★l2o={x=-1/2,y=-1/2}


function ★_bg()
	if (#★_l1==0 and #★_l2==0) then
		init_★()
	end
	draw_★(★_l1)
	draw_★(★_l2)
	update_★_pos()
end

function init_★()
	★_l1={}
	★_l2={}
	★_l1=generate_★s(★_l1,n★_l1)
	★_l2=generate_★s(★_l2,n★_l2)
end

function generate_★s(arr,num)
	local x,y,n = 0,0,0
	while n<num do--screen height
		x=flr(rnd(128))
		y=(y+flr(rnd(100)))%128
		add(arr,{x=x,y=y})
		n+=1
	end
	return arr
end

function draw_★(arr,o)
	for coord in all(arr) do
		pset(coord.x,
							coord.y,7)
	end
end

function update_★_pos()
	add(debug_vars,★_l1[1].x)
	for i=1,#★_l1 do
		★_l1[i]=move_★(★_l1[i],★l1o)
	end
	add(debug_vars,★_l1[1].x)
end

function move_★(arr1,arr2)
	return {x=(arr1.x+arr2.x)%128,
									y=(arr1.y+arr2.y)%128}
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000066666666000000060000000000000000
00000000006666000056660000566600005655000056550000565500005655000055550000000000000000006000000000000000000000060000000000000000
00700700006cc600005cc600005cc600005cc600005cc600005cc600005cc5000058850000000000000000006000000000000000000000060000000000000000
00077000006666000066660000666600006666000065650000556500005555000055550000000000000000006000000000000000000000060000000000000000
00077000000650000006500000065000000650000006500000055000000550000005500000000000000000006000000000000000000000060000000000000000
00700700006666000066660000666500005665000055650000555500005555000055550000000000000000006000000000000000000000060000000000000000
00000000006006000060060000600500006005000050050000500500005005000050050000000600000000006000000000000000000000060000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000666666666000000000000000000000060000000000000000
00000000006666000056660000566600005655000056550000565500005655000055550000000000000000006666666600000000000000000000000000000000
00000000006cc600005cc600005cc600005cc600005cc600005cc600005cc5000058850000000000000000006000000000000000000000000000000000000000
00000000006666000066660000666600006666000065650000556500005555000055550000000000000000006000000000000000000000000000000000000000
00000000000650000006600000065000000650000005500000055000000550000005500000000000000000006000000000000000000000000000000000000000
00000000000650000006500000065000000650000006500000055000000550000005500000000000000000006000000000000000000000000000000000000000
00000000006666000066660000666500005665000055650000555500005555000055550000000000000000006000000000000000000000000000000000000000
00000000006006000060060000600500006005000050050000500500005005000050050000000000000000006000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000006600000006000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
090909090909090b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0909090909091b2a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
09090909091b2a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
090909091b2a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0c0c0c0c2a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
